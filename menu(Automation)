import os
import getpass
os.system("tput setaf 3")
print("\t\t\t WELCOME TO MY MENU!!")
os.system("tput setaf 7")
print("\t\t\t_ _ _ _ _ _ _ _ _ _ _ _ _")

pass=getpass.getpass("Please Enter password:")
if pass != "linux":
    print("incorrect password")
    exit()
r=input("Where do you want to run this program?(remote/local):")
print(r)
while true:
    os.system("clear")
    print("""
    \n
    press 1: launch an instance in AWS
    press 2: to add ebs volume 
    press 3: to attach ebs volume
    press 4: launch cloudfront
    press 5: EXIT
    """)
    ch=input("enter your choice:")
    print(ch)
    if r=="local":
        if int(ch)==1:
            os.system("aws configure")
            a=input("image id:")
            b=input("subnet id:")
            c=input("security group id:")
            d=("keyname:")
            os.system("aws ec2 run-instances --image-id {0} --instance-type    t2.micro --count 1 --subnet-id {1} --security-group-ids {2} --key-name hadoopkey".format(a,b,c))
            print("instance successfully launched")

        elif int(ch)==2:
            os.system("aws configure")
            e=input("Enter the availability zone where you want to create volume:")
            f=input("enter the volume size:")
            os.system("aws ec2 create-volume --availability-zone {0} --size {1}".format(e,f))
            print("volume created")
        elif int(ch)==3:
            os.system("aws configure")
            g=input("enter device")
            h=input("enter instance id:")
            i=input("enter volume id:")
            os.system("aws ec2 attach-volume --device {0} --instance-id {1} --volume-id {2}".format(g,h,i))
            print("volume successfully attached")
        elif int(ch)==4:
            os.system("aws configure")
            j=input("origin domain name:")
            k=input("default root object:")
            os.system("aws cloudfront create-distribution \ --origin-domain-name {0} \ --default-root-object {1}"format.(j,k))
            print("Cloudfront successfully created")
        elif int(ch)==5:
            os.system("exit")
        else:
            print("not supported")
    elif r=="remote":
        ip=input("enter remote ip:")
        if int(ch)==1:
            os.system("ssh {} aws configure".format(ip))
            a=input("image id:")
            b=input("subnet id:")
            c=input("security group id:")
            d=("keyname:")
            os.system("aws ec2 run-instances --image-id {0} --instance-type    t2.micro --count 1 --subnet-id {1} --security-group-ids {2} --key-name hadoopkey".format(a,b,c))
            print("instance successfully launched")
        elif int(ch)==2:
            os.system("ssh {} aws configure".format(ip))
            e=input("Enter the availability zone where you want to create volume:")
            f=input("enter the volume size:")
            os.system("aws ec2 create-volume --availability-zone {0} --size {1}".format(e,f))
            print("volume created")
        elif int(ch)==3:
            os.system("ssh {} aws configure".format(ip))
            g=input("enter device")
            h=input("enter instance id:")
            i=input("enter volume id:")
            os.system("aws ec2 attach-volume --device {0} --instance-id {1} --volume-id {2}".format(g,h,i))
            print("volume successfully attached")
        elif int(ch)==4:
            os.system("ssh {} aws configure".format(ip))
            j=input("origin domain name:")
            k=input("default root object:")
            os.system("aws cloudfront create-distribution \ --origin-domain-name {0} \ --default-root-object {1}"format.(j,k))
            print("Cloudfront successfully created")
        elif int(ch)==5:
            os.system("exit")
        else:
            print("not supported")
    else:
        print("choose either local or remote")
